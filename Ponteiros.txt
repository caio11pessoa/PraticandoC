Aula 1 - Introdução Ponteiros
8 bits = 1byte
1024 bytes = 1kilobyte
1024 kylobytes = 1 megabyte
1024 megabytes = 1 gigabyte


1 bit = 0 ou 1 (menor espaço de memória possível no computador)

int x; -> o compulidor vai na memória do computador, procura um espaço armazenável que contenha espaços necessários para se armazenar um inteiro

existe uma diferença entre valor que está contido na memória do meu computador e o endereço onde está contido esse valor
o endereço de memória é o inicial

ponteiros utiliza os endereços de memória
-> altera o valor que está nesse endereço específico

& -> indica o endereço da memória que contém a variável em questão

o ponteiro precisa saber que tipo de dado ele vai estar apontando, int, char, etc...

int *ponteiro; //criado um ponteiro que está apontando para algum inteiro(sendo declarado)
ponteiro = &x


*ponteiro -> valor
a ponteiro -> endereço de memória
AULA 03 - ponteiro "char, int, double" - Aula 63

    	int *pX;//Declarando o ponteiro, usa-se o *

    	pX = &x;//Passando para o ponteiro o endereço de memória de x, usa-se o &
	o endereço desse ponteiro, está apontando ao endereço de x

	int *pX = &x;//Declarando e atribuindo na mesma linha


	*pX = alguma coisa
	o valor que *pX está apontando será atribuído a alguma coisa

quando colocamos o ponteiro dessa maneira pX, queremos nos referir ao local da memória que ele está apontando
quando colocamos o ponteiro dessa maneira *pX, queremos nos referir ao valor que está armazenado no lugar da memória em que ele está apontando

Os ponteiros podem ser usados para realizar operações matemáticas, desde que se utilize o *

ex    	double soma = *pX + *pY;

se retirar os * vai dar um erro, pois o compilador vai estar tentando somar dois endereços de memória, o que não é possível

pode ser atribuído diretamente um endereço de memória a um ponteiro

int *ponteiro;
ponteiro = 232144;//acredito que não seja aconselhado


































